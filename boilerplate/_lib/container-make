#!/bin/bash -x

if [[ "$1" == "-h"* ]] || [[ "$1" == "--h"* ]]; then
  echo "Usage: $0 {arguments to the real 'make'}"
  echo "Runs 'make' in the boilerplate backing container."
  echo "If the command fails, starts a shell in the container so you can debug."
  exit -1
fi

source ${0%/*}/common.sh

CONTAINER_ENGINE=$(command -v podman || command -v docker)
[[ -n "$CONTAINER_ENGINE" ]] || err "Couldn't find a container engine. Are you already in a container?"

CONTAINER_ROOT="/go/src/${REPO_ROOT##*/src/}"
 if [[ $CONTAINER_ROOT == "/go/src/${REPO_ROOT}" ]]
then
 # If the container root is the same as the repo root without the substring
 # removal it didn't take because the path might be set up differently
 # so let's just reset the container root to the repo root
  echo "$_lib couldn't parse container root"
  CONTAINER_ROOT=$REPO_ROOT
fi

# First set up a detached container with the repo mounted.
banner "Starting the container"
container_id=$($CONTAINER_ENGINE run -d -v "$REPO_ROOT":"$CONTAINER_ROOT" $IMAGE_PULL_PATH tail -f /dev/null)
if [[ $? -ne 0 ]] || [[ -z "$container_id" ]]; then
  err "Couldn't start detached container"
fi

# Now run our `make` command in it with the right UID and working directory
args="exec -it -u $(id -u):0 -w $CONTAINER_ROOT $container_id"
banner "Running: make $@"
$CONTAINER_ENGINE $args make "$@"
rc=$?

# If it failed, drop into the container in a shell
if [[ $rc -ne 0 ]]; then
  banner "The 'make' command failed! Starting a shell in the container for debugging. Just 'exit' when done."
  $CONTAINER_ENGINE $args /bin/bash
fi

# Finally, remove the container
banner "Cleaning up the container"
$CONTAINER_ENGINE rm -f $container_id >/dev/null
